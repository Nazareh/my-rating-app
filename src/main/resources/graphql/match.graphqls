type Mutation {
    postMatch(input: MatchInput!): MatchResponse!
}

type Query {
    myMatches: [MatchResponse!]!
}

scalar LocalDateTime

input MatchInput {
    team1: TeamInput!
    team2: TeamInput!
    startTime: LocalDateTime!
    setsPlayed: [SetInput!]!
}

input SetInput {
    team1Score: Int!
    team2Score: Int!
}


input TeamInput {
    matchPlayer1: ID!
    matchPlayer2: ID!
}

type MatchPlayer {
    id: ID!
    name: String!
    status: MatchStatus!
}

type Set {
    team1Score: Int!
    team2Score: Int!
}

type Team {
    matchPlayer1: MatchPlayer!
    matchPlayer2: MatchPlayer!
}

type MatchResponse {
    id: ID!
    team1: Team!
    team2: Team!
    setsPlayed: [Set!]!
    startTime: LocalDateTime!
}

enum MatchStatus {
    PENDING
    APPROVED
    REJECTED
}
